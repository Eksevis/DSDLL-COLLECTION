/*
 *  This file is part of dsmmorpg.
 *  
 *  dsmmorpg is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  dsmmorpg is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with dsmmorpg.  If not, see <http://www.gnu.org/licenses/>.
 */


Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
SiegePos m_GoalPosition$;

#include "k_job_c_mcp_fidget_utils"
#include "k_inc_rs_packet"

startup state Startup$
{
}


////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.GetGo;
	m_Mind$		= job$.GetGo.GetMind;
	m_Body$		= job$.GetGo.GetBody;
}


event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );
	m_GoalPosition$ = m_Job$.GoalPosition;
	
	
	// add checks in here for 
	// - too far? GetSiegeDistance(m_Go$.Placement.Position, m_GoalPosition$ )
	// - path blocked? eReqRetCode ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_APPROACH, m_GoalPosition$, m_Job$.Float1 );
	// - etc
	
	RSMove$ (m_GoalPosition$);
	
	job$.MarkForDeletion();
}



state Approaching$
{
	event OnEnterState$
	{
		eReqRetCode ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_APPROACH, m_GoalPosition$, m_Job$.Float1 );
		
		if (RequestFailed(ret$) && ( GetSiegeDistance(m_Go$.Placement.Position, m_GoalPosition$ ) > m_Job$.Float1+2.5 ))
		{
			ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_APPROACH, m_GoalPosition$, m_Job$.Float1+1.5 );
		}
		
		if (RequestFailed(ret$) && ( GetSiegeDistance(m_Go$.Placement.Position, m_GoalPosition$ ) > m_Job$.Float1+4.0 ))
		{
			ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_APPROACH, m_GoalPosition$, m_Job$.Float1+3.0 );
		}
		
		
		/*report.screenf(	"'%s' - job_move - PL_APPROACH [%s] returned '%s'\n",
						m_Go$.TemplateName,
						MakeSiegePosString(m_GoalPosition$),
						ToString(ret$) );*/

  		if( RequestFailed(ret$) )
		{
			/*Report.screenf(	"[aiskrit] '%s' - job_move - FAILED could not get to target [%s]. Aborting job.\n",
							m_Go$.TemplateName, MakeSiegePosString(m_GoalPosition$) );*/
			SetState( Failed$ );
		} 
		else if (ret$ == REQUEST_OK_IN_RANGE)
		{
			SetState( Arrived$ );
		}
		else if (ret$ == REQUEST_OK_BEYOND_RANGE)
		{
			SetState( MovingCloser$ );
		}
		else 
		{
			SetState( Walking$ );
		}
	}
}

state MovingCloser$
{
	transition
	{
		// For some reason we could not reach the target in one move request, will need to 
		// approach again when we finish
		-> Approaching$:	OnWorldMessage( WE_MCP_SECTION_COMPLETED );
		-> Approaching$:    OnWorldMessage( WE_ANIM_DONE );
		-> Failed$:			OnWorldMessage( WE_REQ_JOB_END );			// Why would we get this --biddle
		-> Failed$:			OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );	// path blockage
		-> Failed$:			OnWorldMessage( WE_MCP_NODE_BLOCKED );		// path blockage
		-> Approaching$:   	OnWorldMessage( WE_MCP_SECTION_COMPLETED );
	}
}

state Walking$
{
	trigger OnTimer$ (1)
	{
		this.CreateTimer (1, 2);
		//RSJobTravelDistanceReached$ (m_Go$.Placement.Position);
		report.screen ("UPDATE");
	}
	
	event OnEnterState$
	{
		if (m_Go$.HasComponent ("object"))
		{
			int id$ = m_Go$.GetComponentInt ("object", "id");
			int local$ = GameAuditor.GetDb.GetInt ("client:local");
			
			if (id$ == local$)
			{
				this.CreateTimer (1, 2);
			}
		}
	}
	
	transition
	{
		// We are switching to the fidget that is automatic upon arrival
		-> Arrived$:	OnWorldMessage( WE_MCP_SECTION_COMPLETED );
		-> Arrived$:    OnWorldMessage( WE_ANIM_DONE );
		-> Arrived$:	OnWorldMessage( WE_REQ_JOB_END );
		-> Failed$:		OnWorldMessage( WE_MCP_DEPENDANCY_BROKEN );	// path blockage
		-> Failed$:		OnWorldMessage( WE_MCP_NODE_BLOCKED );		// path blockage
	}
}


////////////////////////////////////////////////////////////////////////////////
//	
state Failed$
{
	event OnEnterState$
	{
		// "teleport" back to the last valid location ?
		Report.reportf(	"aiskrit", "'%s' - job_move - failed.\n", m_Go$.TemplateName );

		if( m_Job$.GoalOrientation.IsValid )
		{
			SiegeRot orient$	= SiegeRot.MakeDefault();
			orient$.rot 		= m_Job$.GoalOrientation;
			orient$.node 		= m_GoalPosition$.node;
			eReqRetCode ret$ 	= MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, orient$ );
		}

		m_Job$.MarkForDeletion( JR_FAILED_NO_PATH );
	}
}


state Arrived$
{
	event OnEnterState$
	{
		Report.reportf(	"aiskrit", "'%s' - job_move - arrived.\n", m_Go$.TemplateName );
		
		if (m_Go$.HasComponent ("object"))
		{
			int id$ = m_Go$.GetComponentInt ("object", "id");
			int local$ = GameAuditor.GetDb.GetInt ("client:local");
			
			if (id$ == local$)
			{
				//RSJobTravelDistanceReached$ (m_Go$.Placement.Position);
				report.screen ("END");
			}
		}
		
		if (m_Go$ == Server.ScreenHero) // use different logic here
		{
			// if (m_Go$.GetComponentInt ("object", "id") == GameAuditor.GetDb.GetInt ("local:screenhero"))
			RSJobTravelDistanceReached$ (m_Go$.Placement.Position);
		}
		
		if (m_Job$.GoalOrientation.IsValid)
		{
			SiegeRot orient$ = SiegeRot.MakeDefault();
			orient$.rot = m_Job$.GoalOrientation;
			orient$.node = m_GoalPosition$.node;
			eReqRetCode ret$ = MCPManager.MakeRequest( m_Go$.Goid, PL_FACE, orient$ );
		}
		m_Job$.MarkForDeletion();
	}
}